"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
from tortoise import Tortoise

async def create_performance_indices():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from tortoise_config import TORTOISE_CONFIG
    await Tortoise.init(config=TORTOISE_CONFIG)
    
    connection = Tortoise.get_connection("default")
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫ (bids)
    bid_indices = [
        # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
        "CREATE INDEX IF NOT EXISTS idx_bid_title_search ON bid (title_uk, title_en);",
        "CREATE INDEX IF NOT EXISTS idx_bid_description_search ON bid (description_uk, description_en);",
        
        # –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        "CREATE INDEX IF NOT EXISTS idx_bid_category_country ON bid (categories, country_id);",
        "CREATE INDEX IF NOT EXISTS idx_bid_date_status ON bid (created_at DESC, status);",
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–ª–∞–≥–æ–≤
        "CREATE INDEX IF NOT EXISTS idx_bid_slugs ON bid (slug_uk, slug_en, slug_pl, slug_fr, slug_de);",
        
        # –ò–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∞
        "CREATE INDEX IF NOT EXISTS idx_bid_author ON bid (user_id);",
    ]
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–π (companies)
    company_indices = [
        # –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        "CREATE INDEX IF NOT EXISTS idx_company_name_search ON companies (name, name_uk, name_en);",
        "CREATE INDEX IF NOT EXISTS idx_company_description_search ON companies (description_uk, description_en);",
        
        # –ò–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–∞–≥–∞
        "CREATE INDEX IF NOT EXISTS idx_company_slug ON companies (slug_name);",
        
        # –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        "CREATE INDEX IF NOT EXISTS idx_company_location ON companies (country, city);",
        "CREATE INDEX IF NOT EXISTS idx_company_owner ON companies (owner_id);",
        
        # –ò–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        "CREATE INDEX IF NOT EXISTS idx_company_categories ON companies (categories);",
    ]
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_indices = [
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ email –∏ –Ω–∏–∫–Ω–µ–π–º—É
        "CREATE INDEX IF NOT EXISTS idx_user_email ON users (email);",
        "CREATE INDEX IF NOT EXISTS idx_user_nickname ON users (nickname);",
        
        # –ò–Ω–¥–µ–∫—Å –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
        "CREATE INDEX IF NOT EXISTS idx_user_location ON users (country_id, city_id);",
    ]
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Ç–æ–≤
    chat_indices = [
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "CREATE INDEX IF NOT EXISTS idx_chat_participants ON chats (user1_id, user2_id);",
        "CREATE INDEX IF NOT EXISTS idx_chat_updated ON chats (updated_at DESC);",
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
    all_indices = bid_indices + company_indices + user_indices + chat_indices
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    for i, query in enumerate(all_indices, 1):
        try:
            await connection.execute_query(query)
            print(f"‚úÖ [{i}/{len(all_indices)}] –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω: {query.split()[5] if len(query.split()) > 5 else 'unknown'}")
        except Exception as e:
    
    print(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(all_indices)} –∏–Ω–¥–µ–∫—Å–æ–≤")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SQLite
    sqlite_optimizations = [
        "PRAGMA journal_mode = WAL;",  # Write-Ahead Logging –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        "PRAGMA synchronous = NORMAL;",  # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é
        "PRAGMA cache_size = 10000;",  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–µ—à –¥–æ 10MB
        "PRAGMA temp_store = MEMORY;",  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–∞–º—è—Ç–∏
        "PRAGMA mmap_size = 268435456;",  # Memory-mapped I/O (256MB)
    ]
    
    print("\n‚ö° –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π SQLite...")
    for optimization in sqlite_optimizations:
        try:
            await connection.execute_query(optimization)
            print(f"‚úÖ {optimization}")
        except Exception as e:
    
    await Tortoise.close_connections()
    print("\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(create_performance_indices())
