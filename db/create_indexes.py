"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ö–µ–º—ã
"""

import asyncio
from tortoise import Tortoise
from config import DATABASE_URL


async def create_performance_indexes():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    await Tortoise.init(
        db_url=DATABASE_URL,
        modules={"models": ["models.user", "models.actions", "models.places", "models.categories", "models.chat"]}
    )
    
    connection = Tortoise.get_connection("default")
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã bids (–∑–∞—è–≤–∫–∏)
    bid_indexes = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        "CREATE INDEX IF NOT EXISTS idx_bids_created_at ON bids (created_at DESC);",
        "CREATE INDEX IF NOT EXISTS idx_bids_country_id ON bids (country_id);",
        "CREATE INDEX IF NOT EXISTS idx_bids_city ON bids (city);",
        "CREATE INDEX IF NOT EXISTS idx_bids_author_id ON bids (author_id);",
        
        # JSON –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (PostgreSQL)
        "CREATE INDEX IF NOT EXISTS idx_bids_categories ON bids USING GIN (categories);",
        "CREATE INDEX IF NOT EXISTS idx_bids_under_categories ON bids USING GIN (under_categories);",
        
        # –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ (PostgreSQL)
        "CREATE INDEX IF NOT EXISTS idx_bids_search_uk ON bids USING GIN (to_tsvector('russian', COALESCE(title_uk, '') || ' ' || COALESCE(description_uk, '')));",
        "CREATE INDEX IF NOT EXISTS idx_bids_search_en ON bids USING GIN (to_tsvector('english', COALESCE(title_en, '') || ' ' || COALESCE(description_en, '')));",
        
        # –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
        "CREATE INDEX IF NOT EXISTS idx_bids_country_created ON bids (country_id, created_at DESC);",
        "CREATE INDEX IF NOT EXISTS idx_bids_city_created ON bids (city, created_at DESC);",
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ (fallback –¥–ª—è SQLite)
        "CREATE INDEX IF NOT EXISTS idx_bids_title_uk ON bids (title_uk);",
        "CREATE INDEX IF NOT EXISTS idx_bids_title_en ON bids (title_en);",
    ]
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã companies (–∫–æ–º–ø–∞–Ω–∏–∏)
    company_indexes = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        "CREATE INDEX IF NOT EXISTS idx_companies_name ON companies (name);",
        "CREATE INDEX IF NOT EXISTS idx_companies_country ON companies (country);",
        "CREATE INDEX IF NOT EXISTS idx_companies_city ON companies (city);",
        "CREATE INDEX IF NOT EXISTS idx_companies_owner_id ON companies (owner_id);",
        "CREATE INDEX IF NOT EXISTS idx_companies_slug_name ON companies (slug_name);",
        
        # –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        "CREATE INDEX IF NOT EXISTS idx_companies_country_city ON companies (country, city);",
        
        # –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        "CREATE INDEX IF NOT EXISTS idx_companies_search ON companies USING GIN (to_tsvector('russian', COALESCE(name, '') || ' ' || COALESCE(description_uk, '')));",
    ]
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã blog_articles (–±–ª–æ–≥)
    blog_indexes = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        "CREATE INDEX IF NOT EXISTS idx_blog_published_created ON blog_articles (is_published, created_at DESC);",
        "CREATE INDEX IF NOT EXISTS idx_blog_author_id ON blog_articles (author_id);",
        
        # –°–ª–∞–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        "CREATE INDEX IF NOT EXISTS idx_blog_slug_uk ON blog_articles (slug_uk);",
        "CREATE INDEX IF NOT EXISTS idx_blog_slug_en ON blog_articles (slug_en);",
        "CREATE INDEX IF NOT EXISTS idx_blog_slug_pl ON blog_articles (slug_pl);",
        
        # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        "CREATE INDEX IF NOT EXISTS idx_blog_title_uk ON blog_articles (title_uk);",
        "CREATE INDEX IF NOT EXISTS idx_blog_title_en ON blog_articles (title_en);",
    ]
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
    user_indexes = [
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã)
        "CREATE UNIQUE INDEX IF NOT EXISTS idx_users_email ON users (email);",
        "CREATE INDEX IF NOT EXISTS idx_users_role ON users (role);",
        "CREATE INDEX IF NOT EXISTS idx_users_created_at ON users (created_at);",
        "CREATE INDEX IF NOT EXISTS idx_users_is_verified ON users (is_verified);",
    ]
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã categories (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    category_indexes = [
        "CREATE INDEX IF NOT EXISTS idx_categories_parent_id ON categories (parent_id);",
        "CREATE INDEX IF NOT EXISTS idx_categories_name_uk ON categories (name_uk);",
        "CREATE INDEX IF NOT EXISTS idx_categories_slug_uk ON categories (slug_uk);",
    ]
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã countries (—Å—Ç—Ä–∞–Ω—ã)
    country_indexes = [
        "CREATE INDEX IF NOT EXISTS idx_countries_name_en ON countries (name_en);",
        "CREATE INDEX IF NOT EXISTS idx_countries_name_uk ON countries (name_uk);",
        "CREATE INDEX IF NOT EXISTS idx_countries_code ON countries (code);",
    ]
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã cities (–≥–æ—Ä–æ–¥–∞)
    city_indexes = [
        "CREATE INDEX IF NOT EXISTS idx_cities_country_id ON cities (country_id);",
        "CREATE INDEX IF NOT EXISTS idx_cities_name_en ON cities (name_en);",
        "CREATE INDEX IF NOT EXISTS idx_cities_name_uk ON cities (name_uk);",
        "CREATE INDEX IF NOT EXISTS idx_cities_country_name ON cities (country_id, name_en);",
    ]
    
    all_indexes = (
        bid_indexes + 
        company_indexes + 
        blog_indexes + 
        user_indexes + 
        category_indexes + 
        country_indexes + 
        city_indexes
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    success_count = 0
    error_count = 0
    
    for index_sql in all_indexes:
        try:
            await connection.execute_query(index_sql)
            index_name = index_sql.split()[5] if "IF NOT EXISTS" in index_sql else "unknown"
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {index_name}")
            success_count += 1
        except Exception as e:
            error_count += 1
    
    print(f"\nüìä –ò—Ç–æ–≥–∏:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {success_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è PostgreSQL
    if "postgresql" in DATABASE_URL.lower():
        print("\nüêò –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è PostgreSQL...")
        
        postgres_commands = [
            "ANALYZE;",
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
            "CREATE EXTENSION IF NOT EXISTS pg_trgm;",  # –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è LIKE –ø–æ–∏—Å–∫–∞
            "CREATE EXTENSION IF NOT EXISTS btree_gin;",  # –î–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö GIN –∏–Ω–¥–µ–∫—Å–æ–≤
        ]
        
        for cmd in postgres_commands:
            try:
                await connection.execute_query(cmd)
                print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {cmd}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {cmd} - {e}")
    
    await Tortoise.close_connections()
    print("\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


async def analyze_table_performance():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    await Tortoise.init(
        db_url=DATABASE_URL,
        modules={"models": ["models.user", "models.actions", "models.places", "models.categories", "models.chat"]}
    )
    
    connection = Tortoise.get_connection("default")
    
    print("üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
    try:
        if "postgresql" in DATABASE_URL.lower():
            size_query = """
            SELECT 
                schemaname,
                tablename,
                attname,
                n_distinct,
                correlation
            FROM pg_stats 
            WHERE schemaname = 'public' 
            AND tablename IN ('bids', 'companies', 'blog_articles', 'users');
            """
            
            stats = await connection.execute_query(size_query)
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–æ–Ω–æ–∫:")
            for row in stats[1]:  # [1] —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
                print(f"   {row[1]}.{row[2]}: distinct={row[3]}, correlation={row[4]}")
    
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    
    await Tortoise.close_connections()


if __name__ == "__main__":
    print("üîß –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    asyncio.run(create_performance_indexes())
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    asyncio.run(analyze_table_performance())
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ ANALYZE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("2. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –ª–æ–≥–∞—Ö PostgreSQL")
    print("3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü")
    print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤")
