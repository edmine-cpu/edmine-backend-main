"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import time
from tortoise import Tortoise

async def performance_benchmark():
    """–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    from tortoise_config import TORTOISE_CONFIG
    await Tortoise.init(config=TORTOISE_CONFIG)
    
    connection = Tortoise.get_connection("default")
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
    start_time = time.time()
    
    queries = [
        ("–ó–∞—è–≤–∫–∏", "SELECT COUNT(*) FROM bid"),
        ("–ö–æ–º–ø–∞–Ω–∏–∏", "SELECT COUNT(*) FROM companies"),
        ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "SELECT COUNT(*) FROM users"),
        ("–ß–∞—Ç—ã", "SELECT COUNT(*) FROM chats"),
    ]
    
    for name, query in queries:
        try:
            result = await connection.execute_query_dict(query)
            count = list(result[0].values())[0] if result else 0
            print(f"üìä {name}: {count:,} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ {name}: {e}")
    
    analysis_time = time.time() - start_time
    print(f"‚è±Ô∏è  –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞: {analysis_time:.3f}s")
    print()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
    print("üîç –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫")
    
    search_tests = [
        ("–ü–æ–∏—Å–∫ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤", "SELECT * FROM bid WHERE title_uk LIKE '%–≤–µ–±%' LIMIT 10"),
        ("–ü–æ–∏—Å–∫ –ø–æ ID", "SELECT * FROM bid WHERE id < 100 LIMIT 10"),
        ("–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ", "SELECT * FROM bid WHERE created_at > datetime('now', '-30 days') LIMIT 10"),
        ("–ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É", "SELECT * FROM bid WHERE user_id = 1 LIMIT 10"),
    ]
    
    for test_name, query in search_tests:
        start_time = time.time()
        try:
            result = await connection.execute_query_dict(query)
            query_time = time.time() - start_time
            count = len(result) if result else 0
            print(f"‚ö° {test_name}: {query_time:.3f}s ({count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
        except Exception as e:
            print(f"‚ùå {test_name}: –û—à–∏–±–∫–∞ - {e}")
    
    print()
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
    print("üîç –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π")
    
    company_tests = [
        ("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", "SELECT * FROM companies WHERE name LIKE '%—Ç–µ—Å—Ç%' LIMIT 10"),
        ("–ü–æ–∏—Å–∫ –ø–æ ID", "SELECT * FROM companies WHERE id < 50 LIMIT 10"),
        ("–ü–æ–∏—Å–∫ –ø–æ —Å–ª–∞–≥—É", "SELECT * FROM companies WHERE slug_name LIKE 'test%' LIMIT 10"),
        ("–ü–æ–∏—Å–∫ –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É", "SELECT * FROM companies WHERE owner_id = 1 LIMIT 10"),
    ]
    
    for test_name, query in company_tests:
        start_time = time.time()
        try:
            result = await connection.execute_query_dict(query)
            query_time = time.time() - start_time
            count = len(result) if result else 0
            print(f"‚ö° {test_name}: {query_time:.3f}s ({count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
        except Exception as e:
            print(f"‚ùå {test_name}: –û—à–∏–±–∫–∞ - {e}")
    
    print()
    
    # –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
    print("üìà –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤")
    try:
        indices_result = await connection.execute_query_dict(
            "SELECT name, sql FROM sqlite_master WHERE type='index' AND name LIKE 'idx_%'"
        )
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indices_result)}")
        for idx in indices_result[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   üìç {idx['name']}")
        if len(indices_result) > 5:
            print(f"   ... –∏ –µ—â–µ {len(indices_result) - 5}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 5: –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("üíæ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import os
        db_path = "db/database.db"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î
        if os.path.exists(db_path):
            size_bytes = os.path.getsize(db_path)
            size_mb = size_bytes / (1024 * 1024)
            print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ë–î: {size_mb:.2f} MB ({size_bytes:,} –±–∞–π—Ç)")
        else:
            print("üìÅ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π)
        table_analysis = await connection.execute_query_dict("""
            SELECT 
                name,
                (SELECT COUNT(*) FROM sqlite_master WHERE type='index' AND tbl_name=m.name) as index_count
            FROM sqlite_master m 
            WHERE type='table' AND name NOT LIKE 'sqlite_%'
        """)
        
        print("üìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü:")
        for table in table_analysis:
            print(f"   üóÇÔ∏è  {table['name']}: {table['index_count']} –∏–Ω–¥–µ–∫—Å–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞: {e}")
    
    print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print("   1. –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ VACUUM –¥–ª—è —Å–∂–∞—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ EXPLAIN QUERY PLAN –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("   3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü")
    print("   4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã - —É–¥–∞–ª—è–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ")
    print("   5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    await Tortoise.close_connections()
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(performance_benchmark())
