"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∏–¥–æ–≤ –≤ –ë–î —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
"""
import asyncio
import secrets
import os
import sys

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tortoise import Tortoise
from dotenv import load_dotenv
from models.actions import Bid
from models.user import User
from models.places import Country, City
from models.categories import Category, UnderCategory


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    load_dotenv()
    DB_PASSWORD = os.getenv("DB_PASSWORD")

    await Tortoise.init(
        db_url=f"postgres://postgres:{DB_PASSWORD}@0.0.0.0:5432/makeasap_dev",
        modules={
            "models": [
                "models.user",
                "models.actions",
                "models.categories",
                "models.places",
                "models.chat",
                "models.password_reset",
            ]
        }
    )


async def get_existing_data():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –¥–ª—è —Å–≤—è–∑–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    users = await User.all().limit(5)
    countries = await Country.all().limit(5)
    cities = await City.all().limit(5)
    categories = await Category.all().limit(5)
    undercategories = await UnderCategory.all().limit(5)

    if not users:
        print("‚ö†Ô∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î! –°–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return None

    if not countries:
        print("‚ö†Ô∏è  –ù–µ—Ç —Å—Ç—Ä–∞–Ω –≤ –ë–î!")
        return None

    if not cities:
        print("‚ö†Ô∏è  –ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –≤ –ë–î!")
        return None

    if not categories:
        print("‚ö†Ô∏è  –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î!")
        return None

    if not undercategories:
        print("‚ö†Ô∏è  –ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î!")
        return None

    return {
        "users": users,
        "countries": countries,
        "cities": cities,
        "categories": categories,
        "undercategories": undercategories
    }


async def create_test_bids():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∏–¥–æ–≤"""
    await init_db()

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = await get_existing_data()
    if not data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–¥–æ–≤")
        await Tortoise.close_connections()
        return

    print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–¥–æ–≤:")
    print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(data['users'])}")
    print(f"   - –°—Ç—Ä–∞–Ω: {len(data['countries'])}")
    print(f"   - –ì–æ—Ä–æ–¥–æ–≤: {len(data['cities'])}")
    print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(data['categories'])}")
    print(f"   - –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(data['undercategories'])}")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    test_bids_data = [
        {
            "main_language": "uk",
            "title_uk": "–†–æ–∑—Ä–æ–±–∫–∞ —Å–∞–π—Ç—É –Ω–∞ React",
            "description_uk": "–ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—É—á–∞—Å–Ω–æ–≥–æ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É –Ω–∞ React. –ë—é–¥–∂–µ—Ç –≥–Ω—É—á–∫–∏–π.",
            "budget": "3000",
            "budget_type": "fixed"
        },
        {
            "main_language": "en",
            "title_en": "Logo Design for Startup",
            "description_en": "Looking for a creative designer to create a modern logo for our tech startup. Quick turnaround needed.",
            "budget": "500",
            "budget_type": "fixed"
        },
        {
            "main_language": "pl",
            "title_pl": "T≈Çumaczenie dokument√≥w technicznych",
            "description_pl": "Potrzebny t≈Çumacz techniczny z do≈õwiadczeniem w IT. Oko≈Ço 50 stron dokumentacji.",
            "budget": "800",
            "budget_type": "hourly"
        },
        {
            "main_language": "uk",
            "title_uk": "SEO –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—É",
            "description_uk": "–®—É–∫–∞—î–º–æ SEO —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Å—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—É. –î–æ—Å–≤—ñ–¥ —É e-commerce –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π.",
            "budget": "2500",
            "budget_type": "monthly"
        },
        {
            "main_language": "en",
            "title_en": "Mobile App Development (iOS)",
            "description_en": "Need experienced iOS developer for fitness tracking app. Must have portfolio with similar projects.",
            "budget": "5000",
            "budget_type": "fixed"
        },
        {
            "main_language": "de",
            "title_de": "Datenbankoptimierung PostgreSQL",
            "description_de": "Suche einen Experten f√ºr PostgreSQL-Optimierung. Gro√üe Datenbank mit Performance-Problemen.",
            "budget": "1500",
            "budget_type": "fixed"
        },
        {
            "main_language": "fr",
            "title_fr": "R√©daction de contenu web",
            "description_fr": "Recherche r√©dacteur web exp√©riment√© pour cr√©er du contenu SEO. 20 articles par mois.",
            "budget": "1200",
            "budget_type": "monthly"
        },
        {
            "main_language": "uk",
            "title_uk": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä—É Linux",
            "description_uk": "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º VPS —Å–µ—Ä–≤–µ—Ä—É. Ubuntu 22.04, Nginx, Docker.",
            "budget": "400",
            "budget_type": "fixed"
        },
    ]

    created_count = 0

    for i, bid_data in enumerate(test_bids_data):
        try:
            # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–≤—è–∑–∏
            user = data["users"][i % len(data["users"])]
            country = data["countries"][i % len(data["countries"])]
            city = data["cities"][i % len(data["cities"])]
            category = data["categories"][i % len(data["categories"])]
            undercategory = data["undercategories"][i % len(data["undercategories"])]

            # –°–æ–∑–¥–∞–µ–º —Å–ª–∞–≥–∏
            main_lang = bid_data["main_language"]
            title_field = f"title_{main_lang}"
            title = bid_data.get(title_field, "Test Bid")

            # –ü—Ä–æ—Å—Ç–æ–π slug –∏–∑ title
            slug_base = title.lower().replace(" ", "-")[:50]

            # –°–æ–∑–¥–∞–µ–º –±–∏–¥
            bid = await Bid.create(
                main_language=bid_data["main_language"],
                title_uk=bid_data.get("title_uk"),
                title_en=bid_data.get("title_en"),
                title_pl=bid_data.get("title_pl"),
                title_fr=bid_data.get("title_fr"),
                title_de=bid_data.get("title_de"),
                description_uk=bid_data.get("description_uk"),
                description_en=bid_data.get("description_en"),
                description_pl=bid_data.get("description_pl"),
                description_fr=bid_data.get("description_fr"),
                description_de=bid_data.get("description_de"),
                **{f"slug_{main_lang}": f"{slug_base}-{i+1}"},
                categories=[category.id],
                under_categories=[undercategory.id],
                author=user,
                country=country,
                city=city,
                budget=bid_data["budget"],
                budget_type=bid_data.get("budget_type", "fixed"),
                delete_token=secrets.token_urlsafe(32),
                auto_translated_fields=[]
            )

            created_count += 1
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±–∏–¥ #{created_count}: {title} (ID: {bid.id}, —è–∑—ã–∫: {main_lang})")

        except Exception as e:

    print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {created_count} –∏–∑ {len(test_bids_data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∏–¥–æ–≤")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await Tortoise.close_connections()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∏–¥–æ–≤...\n")
    asyncio.run(create_test_bids())
