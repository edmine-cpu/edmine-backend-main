from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.staticfiles import StaticFiles
from tortoise.contrib.fastapi import register_tortoise
import time

from api.admin import router as admin_router
from api.bids import router as bids_router
from api.blog import router as blog_router
from api.categories import router as categories_get_router
from api.chat import router as chat_router
from api.password_reset import router as password_reset_router
from api.places import router as places_get_router
from api.profile import router as profile_router
from api.user import router as user_router
from api.company import router as company_router
# from routers.bid import router as bid_router
from routers.secur import router as jwt_router
# from middleware.cache import SimpleCacheMiddleware  # –£–±–∏—Ä–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ

app = FastAPI(
    title="EdMine API",
    description="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ API –¥–ª—è EdMine",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@app.middleware("http")
async def performance_middleware(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    
    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if process_time > 1.0:  # –ë–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
        print(f"üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.url.path} - {process_time:.2f}s")
    
    response.headers["X-Process-Time"] = str(process_time)
    return response

# Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
@app.middleware("http")
async def security_middleware(request: Request, call_next):
    response = await call_next(request)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
    
    return response

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
# app.add_middleware(SimpleCacheMiddleware)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–∂–∞—Ç–∏–µ
app.add_middleware(GZipMiddleware, minimum_size=1000)

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://82.25.86.30:3000",
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["*"],
    max_age=86400,  # –ö—ç—à–∏—Ä—É–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ 24 —á–∞—Å–∞
)


app.include_router(jwt_router, prefix="", tags=["Auth"])
app.include_router(categories_get_router, prefix="/check", tags=["Categories"])
app.include_router(places_get_router, prefix="/api", tags=["Places"])
app.include_router(user_router, prefix="/api", tags=["Users"])
app.include_router(bids_router, prefix="/api", tags=["Bids"])
app.include_router(chat_router, prefix="/api", tags=["Chat"])
app.include_router(profile_router, prefix="/api", tags=["Profile"])
app.include_router(admin_router, prefix="/api", tags=["Admin"])
app.include_router(blog_router, prefix="/api", tags=["Blog"])
app.include_router(password_reset_router, prefix="/api", tags=["Password Reset"])
app.include_router(company_router, prefix="/api", tags=["Company"])


# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
class OptimizedStaticFiles(StaticFiles):
    def __init__(self, directory: str):
        super().__init__(directory=directory)
    
    async def __call__(self, scope, receive, send):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        if scope["type"] == "http":
            path = scope["path"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ TTL –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            if path.endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp', '.ico')):
                cache_control = "public, max-age=86400"  # 24 —á–∞—Å–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            elif path.endswith(('.css', '.js')):
                cache_control = "public, max-age=3600"   # 1 —á–∞—Å –¥–ª—è CSS/JS
            elif path.endswith(('.pdf', '.txt')):
                cache_control = "public, max-age=1800"   # 30 –º–∏–Ω—É—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            else:
                cache_control = "public, max-age=300"    # 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º send –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            original_send = send
            
            async def send_with_cache_headers(message):
                if message["type"] == "http.response.start":
                    headers = list(message.get("headers", []))
                    headers.append([b"cache-control", cache_control.encode()])
                    headers.append([b"etag", f'"{hash(path)}"'.encode()])
                    message["headers"] = headers
                await original_send(message)
            
            return await super().__call__(scope, receive, send_with_cache_headers)
        
        return await super().__call__(scope, receive, send)

app.mount("/static", OptimizedStaticFiles(directory="static"), name="static")


register_tortoise(
    app,
    db_url="postgres://postgres:Ns290872erh@0.0.0.0:5432/makeasap",
    modules={
        "models": [
            "models.user",
            "models.actions",
            "models.categories",
            "models.places",
            "models.chat",
            "models.password_reset",
        ]
    },
    generate_schemas=False,
    add_exception_handlers=True,
)

